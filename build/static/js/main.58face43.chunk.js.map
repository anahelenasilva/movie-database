{"version":3,"sources":["images/react-movie-logo.svg","images/tmdb_logo.svg","components/Header/Header.styles.js","components/Header/index.js","config.js","images/no_image.jpg","components/HeroImage/HeroImage.styles.js","components/HeroImage/index.js","components/Grid/Grid.styles.js","components/Grid/index.js","components/Thumb/Thumb.styles.js","components/Thumb/index.js","images/search-icon.svg","components/SearchBar/SearchBar.styles.js","components/SearchBar/index.js","components/Button/Button.styles.js","components/Button/index.js","API.js","helpers.js","hooks/useHomeFetch.js","components/Spinner/index.js","components/Spinner/Spinner.styles.js","components/Home.js","components/BreadCrumb/BreadCrumb.styles.js","components/BreadCrumb/index.js","components/MovieInfo/MovieInfo.styles.js","components/MovieInfo/index.js","components/MovieInfoBar/MovieInfoBar.styles.js","components/MovieInfoBar/index.js","components/Actor/Actor.styles.js","components/Actor/index.js","components/Movie.js","hooks/useMovieFetch.js","components/NotFound.js","GlobalStyle.js","App.js","index.js"],"names":["Wrapper","styled","div","Content","LogoImg","img","TMDBLogoImg","Header","to","src","RMDBLogo","alt","TMDBLogo","API_URL","API_KEY","process","SEARCH_BASE_URL","POPULAR_BASE_URL","REQUEST_TOKEN_URL","LOGIN_URL","SESSION_ID_URL","IMAGE_BASE_URL","BACKDROP_SIZE","POSTER_SIZE","props","image","Text","HeroImage","title","text","Grid","header","children","Image","Thumb","movieId","clickable","SearchBar","setSearchTerm","useState","state","setState","initial","useRef","useEffect","current","timer","setTimeout","clearTimeout","searchIcon","type","placeholder","onChange","event","currentTarget","value","button","Button","callback","onClick","defaultConfig","method","headers","fetchMovies","searchTerm","page","a","endpoint","fetch","json","fetchMovie","fetchCredits","creditsEndpoint","getRequestToken","reqToken","request_token","authenticate","requestToken","username","password","bodyData","body","JSON","stringify","success","sessionId","calcTime","time","hours","Math","floor","mins","convertMoney","money","Intl","NumberFormat","style","currency","minimumFractionDigits","format","isPersistedState","stateName","sessionState","sessionStorage","getItem","parse","inititalState","results","total_pages","total_results","Spinner","Home","loading","setLoading","error","setError","isLoadingMore","setIsLoadingMore","API","movies","prev","setItem","useHomeFetch","backdrop_path","original_title","overview","map","movie","poster_path","NoImage","id","BreadCrumb","movieTitle","backdrop","MovieInfo","backgrop_path","className","vote_average","directors","length","i","name","credit_id","MovieInfoBar","budget","revenue","Actor","character","imageUrl","Movie","credits","crew","filter","member","job","actors","cast","useMovieFetch","useParams","runtime","actor","profile_path","NotFound","GlobalStyle","createGlobalStyle","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAAe,MAA0B,6CCA1B,MAA0B,sC,cCE5BA,EAAUC,IAAOC,IAAV,gFAKPC,EAAUF,IAAOC,IAAV,+KASPE,EAAUH,IAAOI,IAAV,iHAQPC,EAAcL,IAAOI,IAAV,gH,OCLTE,EAXA,kBACb,cAACP,EAAD,UACE,eAACG,EAAD,WACE,cAAC,IAAD,CAAMK,GAAG,IAAT,SACE,cAACJ,EAAD,CAASK,IAAKC,EAAUC,IAAI,eAE9B,cAACL,EAAD,CAAaG,IAAKG,EAAUD,IAAI,mBCXhCE,EAAU,gCACVC,EAAUC,mCAEVC,EAAe,UAAMH,EAAN,gCAAqCC,EAArC,0BACfG,EAAgB,UAAMJ,EAAN,iCAAsCC,EAAtC,mBAGhBI,EAAiB,UAAML,EAAN,4CAAiDC,GAClEK,EAAS,UAAMN,EAAN,4DAAiEC,GAC1EM,EAAc,UAAMP,EAAN,8CAAmDC,GAEjEO,EAAiB,6BAEjBC,EAAgB,QAEhBC,EAAc,OClBL,MAA0B,qCCE5BvB,GAAUC,IAAOC,IAAV,+SACJ,SAACsB,GAAD,oJAOLA,EAAMC,MAPD,0BAwBHtB,GAAUF,IAAOC,IAAV,gGAMPwB,GAAOzB,IAAOC,IAAV,0gBCXFyB,GAjBG,SAAC,GAAD,IAAGF,EAAH,EAAGA,MAAOG,EAAV,EAAUA,MAAOC,EAAjB,EAAiBA,KAAjB,OAChB,cAAC,GAAD,CAASJ,MAAOA,EAAhB,SACE,cAAC,GAAD,UACE,eAACC,GAAD,WACE,6BAAKE,IACL,4BAAIC,YCRC7B,GAAUC,IAAOC,IAAV,iPAgBPC,GAAUF,IAAOC,IAAV,kICFL4B,GAXF,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,SAAX,OACX,eAAC,GAAD,WACE,6BAAKD,IACL,cAAC,GAAD,UAAUC,QCNDC,GAAQhC,IAAOI,IAAV,wVCqBH6B,GAjBD,SAAC,GAAD,IAAGT,EAAH,EAAGA,MAAOU,EAAV,EAAUA,QAASC,EAAnB,EAAmBA,UAAnB,OACZ,8BACGA,EACE,cAAC,IAAD,CAAM5B,GAAE,WAAM2B,GAAd,SACC,cAACF,GAAD,CAAOxB,IAAKgB,EAAOd,IAAI,sBAEtB,cAACsB,GAAD,CAAOxB,IAAKgB,EAAOd,IAAI,uB,QCZjB,OAA0B,wCCE5BX,GAAUC,IAAOC,IAAV,4IAQPC,GAAUF,IAAOC,IAAV,spBCmCLmC,GAtCG,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAEnB,EAA0BC,mBAAS,IAAnC,oBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAUC,kBAAO,GAgBvB,OAdAC,qBAAU,WAER,IAAIF,EAAQG,QAAZ,CAKA,IAAMC,EAAQC,YAAW,WACvBT,EAAcE,KACb,KAEH,OAAO,kBAAMQ,aAAaF,IARxBJ,EAAQG,SAAU,IASnB,CAACP,EAAeE,IAEZ,cAAC,GAAD,UACL,eAAC,GAAD,WAEE,qBAAK/B,IAAKwC,GAAYtC,IAAI,mCAC1B,uBACEuC,KAAK,OACLC,YAAY,eACZC,SAAU,SAAAC,GAAK,OAAIZ,EAASY,EAAMC,cAAcC,QAChDA,MAAOf,UC/BFxC,GAAUC,IAAOuD,OAAV,2VCaLC,GAXA,SAAC,GAAD,IAAG5B,EAAH,EAAGA,KAAM6B,EAAT,EAASA,SAAT,OACb,cAAC,GAAD,CAASR,KAAK,SAASS,QAASD,EAAhC,SACG7B,K,4CCGC+B,GAAgB,CACpBC,OAAQ,OACRC,QAAS,CACP,eAAgB,qBAIL,IACbC,YAAY,WAAD,8BAAE,WAAOC,EAAYC,GAAnB,gBAAAC,EAAA,6DACLC,EAAWH,EAAU,UACpBhD,GADoB,OACFgD,EADE,iBACiBC,GADjB,UAEpBhD,EAFoB,iBAEKgD,GAHrB,SAKSG,MAAMD,GALf,8BAK0BE,OAL1B,mFAAF,qDAAC,GAQZC,WAAW,WAAD,8BAAE,WAAOnC,GAAP,gBAAA+B,EAAA,6DACJC,EADI,UACUtD,EADV,iBAC0BsB,EAD1B,oBAC6CrB,GAD7C,SAEUsD,MAAMD,GAFhB,8BAE2BE,OAF3B,mFAAF,mDAAC,GAKXE,aAAa,WAAD,8BAAE,WAAOpC,GAAP,gBAAA+B,EAAA,6DACNM,EADM,UACe3D,EADf,iBAC+BsB,EAD/B,4BAC0DrB,GAD1D,SAEQsD,MAAMI,GAFd,8BAEgCH,OAFhC,mFAAF,mDAAC,GAMbI,gBAAgB,WAAD,8BAAE,6BAAAP,EAAA,sEACeE,MAAMlD,GADrB,8BACyCmD,OADzC,cACTK,EADS,yBAERA,EAASC,eAFD,2CAAF,kDAAC,GAKhBC,aAAa,WAAD,8BAAE,WAAOC,EAAcC,EAAUC,GAA/B,kBAAAb,EAAA,6DACNc,EAAW,CACfF,WACAC,WACAJ,cAAeE,GAJL,SASJT,MAAMjD,EAAD,aAAC,gBACPyC,IADM,IAETqB,KAAMC,KAAKC,UAAUH,MAXb,8BAaVX,OAbU,kBAgBHe,QAhBG,iCAkBFhB,MAAMhD,EAAD,aAAC,gBACPwC,IADM,IAETqB,KAAMC,KAAKC,UAAU,CAAER,cAAeE,OApBhC,+BAsBRR,OAtBQ,eAiBJgB,EAjBI,yBAuBHA,GAvBG,4CAAF,uDAAC,ICzCFC,GAAW,SAAAC,GACtB,IAAMC,EAAQC,KAAKC,MAAMH,EAAO,IAC1BI,EAAOJ,EAAO,GACpB,MAAM,GAAN,OAAUC,EAAV,aAAoBG,EAApB,MAGWC,GAAe,SAAAC,GAM1B,OALkB,IAAIC,KAAKC,aAAa,QAAS,CAC/CC,MAAO,WACPC,SAAU,MACVC,sBAAuB,IAERC,OAAON,IAGbO,GAAmB,SAAAC,GAC9B,IAAMC,EAAeC,eAAeC,QAAQH,GAC5C,OAAOC,GAAgBpB,KAAKuB,MAAMH,ICb9BI,GAAgB,CACpBzC,KAAM,EACN0C,QAAS,GACTC,YAAa,EACbC,cAAe,GCRFC,GCCQ7G,IAAOC,IAAV,sWCqDL6G,GAxCF,WAEX,MHL0B,WAC1B,MAA0BxE,mBAASmE,IAAnC,oBAAOlE,EAAP,KAAcC,EAAd,KACA,EAA8BF,oBAAS,GAAvC,oBAAOyE,EAAP,KAAgBC,EAAhB,KACA,EAA0B1E,oBAAS,GAAnC,oBAAO2E,EAAP,KAAcC,EAAd,KACA,EAAoC5E,mBAAS,IAA7C,oBAAOyB,EAAP,KAAmB1B,EAAnB,KACA,EAA0CC,oBAAS,GAAnD,oBAAO6E,EAAP,KAAsBC,EAAtB,KAEMtD,EAAW,yCAAG,WAAOE,GAAP,8BAAAC,EAAA,6DAAaF,EAAb,+BAA0B,GAA1B,SAEhBmD,GAAS,GACTF,GAAW,GAHK,SAKKK,GAAIvD,YAAYC,EAAYC,GALjC,OAKVsD,EALU,OAOhB9E,GAAS,SAAA+E,GAAI,oCACRD,GADQ,IAEXZ,QAAS1C,EAAO,EAAP,uBAAeuD,EAAKb,SAApB,aAAgCY,EAAOZ,UAAvC,aAAsDY,EAAOZ,cATxD,kDAahBQ,GAAS,GACTF,GAAW,GAdK,QAiBlBA,GAAW,GAjBO,0DAAH,sDAkDjB,OA9BArE,qBAAU,WAER,IAAKoB,EAAY,CACf,IAAMsC,EAAeF,GAAiB,aACtC,GAAIE,EAEF,YADA7D,EAAS6D,GAKb7D,EAASiE,IACT3C,EAAY,EAAGC,KAEd,CAACA,IAEJpB,qBAAU,WACHwE,IAELrD,EAAYvB,EAAMyB,KAAO,EAAGD,GAC5BqD,GAAiB,MAChB,CAACD,EAAe5E,EAAMyB,KAAMD,IAE/BpB,qBAAU,WAEHoB,GACHuC,eAAekB,QAAQ,YAAavC,KAAKC,UAAU3C,MAGpD,CAACwB,EAAYxB,IAET,CAAEA,QAAOwE,UAASE,QAAO5E,gBAAe0B,aAAYqD,oBGpDoBK,GAAvElF,EAAR,EAAQA,MAAOwE,EAAf,EAAeA,QAASE,EAAxB,EAAwBA,MAAO5E,EAA/B,EAA+BA,cAAe0B,EAA9C,EAA8CA,WAAYqD,EAA1D,EAA0DA,iBAE1D,OAAIH,EAAc,2DAGhB,sCACIlD,GAAcxB,EAAMmE,QAAQ,IAC5B,cAAC,GAAD,CACElF,MAAK,UAAKJ,GAAL,OAAsBC,GAAtB,OAAsCkB,EAAMmE,QAAQ,GAAGgB,eAC5D/F,MAAOY,EAAMmE,QAAQ,GAAGiB,eACxB/F,KAAMW,EAAMmE,QAAQ,GAAGkB,WAI3B,cAAC,GAAD,CAAWvF,cAAeA,IAE1B,cAAC,GAAD,CAAMP,OAAQiC,EAAa,gBAAkB,iBAA7C,SACGxB,EAAMmE,QAAQmB,KAAI,SAAAC,GAAK,OACtB,cAAC,GAAD,CAEE3F,WAAS,EACTX,MAAOsG,EAAMC,YAAN,UAAuB3G,GAAvB,OAAwCE,GAAxC,OAAsDwG,EAAMC,aAAgBC,EACnF9F,QAAS4F,EAAMG,GAJjB,SAMGH,EAAMnG,OALFmG,EAAMG,SAUhBlB,GAAW,cAAC,GAAD,IACXxE,EAAMyB,KAAOzB,EAAMoE,cAAgBI,GAClC,cAAC,GAAD,CAAQnF,KAAM,YAAa6B,SAAU,kBAAM2D,GAAiB,UC9CvDrH,GAAUC,IAAOC,IAAV,0LAUPC,GAAUF,IAAOC,IAAV,2RCaLiI,GAnBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAH,OACjB,cAAC,GAAD,UACE,eAAC,GAAD,WACE,cAAC,IAAD,CAAM5H,GAAG,IAAT,SACE,0CAGF,qCAEA,+BAAO4H,UCZApI,GAAUC,IAAOC,IAAV,uRACJ,SAACsB,GAAD,OACZA,EAAM6G,SAAN,eACYhH,GADZ,OAC6BC,GAD7B,OAC6CE,EAAM6G,SADnD,MAEI,UAgBKlI,GAAUF,IAAOC,IAAV,gPAcPwB,GAAOzB,IAAOC,IAAV,gnBCYFoI,GAtCG,SAAC,GAAD,IAAGP,EAAH,EAAGA,MAAH,OAChB,cAAC,GAAD,CAASM,SAAUN,EAAMQ,cAAzB,SACE,eAAC,GAAD,WACE,cAAC,GAAD,CACE9G,MAAOsG,EAAMC,YAAN,UAAuB3G,GAAvB,OAAwCE,GAAxC,OAAsDwG,EAAMC,aAAgBC,EACnF7F,WAAW,EACXzB,IAAI,kBACJwB,QAAS4F,EAAMG,KAGjB,eAAC,GAAD,WACE,6BAAKH,EAAMnG,QACX,sCACA,4BAAImG,EAAMF,WAEV,sBAAKW,UAAU,kBAAf,UACE,gCACE,wCACA,qBAAKA,UAAU,QAAf,SAAwBT,EAAMU,kBAGhC,sBAAKD,UAAU,WAAf,UACE,0CAAaT,EAAMW,UAAUC,OAAS,EAAI,IAAM,MAC/CZ,EAAMW,UAAUZ,KAAI,WAAsBc,GAAtB,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAT,OACnB,4BAAoBD,GAAZC,qBCjCT9I,GAAUC,IAAOC,IAAV,gJAQPC,GAAUF,IAAOC,IAAV,2gBCmBL6I,GAtBM,SAAC,GAA+B,IAA7BxD,EAA4B,EAA5BA,KAAMyD,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACpC,OAAO,cAAC,GAAD,UACL,eAAC,GAAD,WACE,qBAAKT,UAAU,SAAf,SACE,+CAAkBlD,GAASC,QAE7B,qBAAKiD,UAAU,SAAf,SACE,yCAAY5C,GAAaoD,QAE3B,qBAAKR,UAAU,SAAf,SACE,0CAAa5C,GAAaqD,cCfrBjJ,GAAUC,IAAOC,IAAV,8NAgBP+B,GAAQhC,IAAOI,IAAV,+HCCH6I,GAdD,SAAC,GAAD,IAAGL,EAAH,EAAGA,KAAMM,EAAT,EAASA,UAAWC,EAApB,EAAoBA,SAApB,OACZ,eAAC,GAAD,WACE,cAAC,GAAD,CAAO3I,IAAK2I,EAAUzI,IAAKkI,IAC3B,6BAAKA,IACL,4BAAIM,QCyCOE,GAlCD,WAEZ,IACA,ECd2B,SAAClH,GAC5B,MAA0BI,qBAA1B,oBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,oBAAS,GAAvC,oBAAOyE,EAAP,KAAgBC,EAAhB,KACA,EAA0B1E,oBAAS,GAAnC,oBAAO2E,EAAP,KAAcC,EAAd,KAwCA,OAtCAvE,qBAAU,WAER,IAAM0B,EAAU,yCAAG,iCAAAJ,EAAA,+EAEKoD,GAAIhD,WAAWnC,GAFpB,cAET4F,EAFS,gBAGOT,GAAI/C,aAAapC,GAHxB,OAGTmH,EAHS,OAKTZ,EAAYY,EAAQC,KAAKC,QAAO,SAAAC,GAAM,MAAmB,aAAfA,EAAOC,OAEvDjH,EAAS,6BACJsF,GADG,IAENW,YACAiB,OAAQL,EAAQM,QAGlB3C,GAAW,GAbI,kDAefE,GAAS,GACTF,GAAW,GAhBI,0DAAH,qDAoBVX,EAAeF,GAAiBjE,GACtC,GAAImE,EAGF,OAFA7D,EAAS6D,QACTW,GAAW,GAIb3C,MAEC,CAACnC,IAEJS,qBAAU,WAER2D,eAAekB,QAAQtF,EAAS+C,KAAKC,UAAU3C,MAC9C,CAACL,EAASK,IAEN,CAAEA,QAAOwE,UAASE,SD7BgB2C,CADrBC,cAAZ3H,SACA+E,EAAR,EAAQA,MAAOF,EAAf,EAAeA,QAAgBe,EAA/B,EAAwBvF,MAExB,OAAIwE,EAAgB,cAAC,GAAD,IAChBE,EAAc,0DAGhB,qCACE,cAAC,GAAD,CAAYkB,WAAYL,EAAMH,iBAC9B,cAAC,GAAD,CAAWG,MAAOA,IAClB,cAAC,GAAD,CACExC,KAAMwC,EAAMgC,QACZf,OAAQjB,EAAMiB,OACdC,QAASlB,EAAMkB,UAEjB,cAAC,GAAD,CAAMlH,OAAO,SAAb,SACGgG,EAAM4B,OAAO7B,KAAI,SAAAkC,GAAK,OACrB,cAAC,GAAD,CAEEnB,KAAMmB,EAAMnB,KACZM,UAAWa,EAAMb,UACjBC,SACEY,EAAMC,aAAN,UACK5I,GADL,OACsBE,GADtB,OACoCyI,EAAMC,cACtChC,GAND+B,EAAMlB,oBEhCRoB,GAFE,kBAAM,4CCAVC,GAAcC,YAAH,2pBCsBTC,GAbH,kBACV,eAAC,IAAD,WACE,cAAC,EAAD,IAEA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,GAAD,MACzB,cAAC,IAAD,CAAOD,KAAK,YAAYC,QAAS,cAAC,GAAD,MACjC,cAAC,IAAD,CAAOD,KAAK,KAAKC,QAAS,cAAC,GAAD,SAE5B,cAACJ,GAAD,QChBJK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.58face43.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/react-movie-logo.42955eb6.svg\";","export default __webpack_public_path__ + \"static/media/tmdb_logo.f15b6632.svg\";","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  background: var(--darkGrey);\n  padding: 0 20px;\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  max-width: var(--maxWidth);\n  padding: 20px 0;\n  margin: 0 auto;\n`;\n\nexport const LogoImg = styled.img`\n  width: 200px;\n\n  @media screen and (max-width: 500px) {\n    width: 150px;\n  }\n`;\n\nexport const TMDBLogoImg = styled.img`\n  width: 100px;\n\n  @media screen and (max-width: 500px) {\n    width: 80px;\n  }\n`;\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport RMDBLogo from '../../images/react-movie-logo.svg';\r\nimport TMDBLogo from '../../images/tmdb_logo.svg';\r\n\r\nimport { Wrapper, Content, LogoImg, TMDBLogoImg } from './Header.styles';\r\n\r\nconst Header = () => (\r\n  <Wrapper>\r\n    <Content>\r\n      <Link to='/'>\r\n        <LogoImg src={RMDBLogo} alt='RMDBLogo' />\r\n      </Link>\r\n      <TMDBLogoImg src={TMDBLogo} alt='TMDBLogo' />\r\n    </Content>\r\n  </Wrapper>\r\n)\r\n\r\nexport default Header;\r\n","// Configuration for TMDB API\n// Read more about the API here: https://developers.themoviedb.org/\n\nconst API_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nconst SEARCH_BASE_URL = `${API_URL}search/movie?api_key=${API_KEY}&language=en-US&query=`;\nconst POPULAR_BASE_URL = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US`;\n\n// For login and voting\nconst REQUEST_TOKEN_URL = `${API_URL}authentication/token/new?api_key=${API_KEY}`;\nconst LOGIN_URL = `${API_URL}authentication/token/validate_with_login?api_key=${API_KEY}`;\nconst SESSION_ID_URL = `${API_URL}authentication/session/new?api_key=${API_KEY}`;\n\nconst IMAGE_BASE_URL = 'http://image.tmdb.org/t/p/';\n// Sizes: w300, w780, w1280, original\nconst BACKDROP_SIZE = 'w1280';\n// w92, w154, w185, w342, w500, w780, original\nconst POSTER_SIZE = 'w780';\n\nexport {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  IMAGE_BASE_URL,\n  BACKDROP_SIZE,\n  POSTER_SIZE,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL,\n};\n","export default __webpack_public_path__ + \"static/media/no_image.22d2aa4d.jpg\";","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  background: ${(props) =>\n    `linear-gradient(\n      to bottom, rgba(0,0,0,0)\n      39%,rgba(0,0,0,0)\n      41%,rgba(0,0,0,0.65)\n      100%\n    ),\n    url('${props.image}'), var(--darkGrey)`};\n  background-size: 100%, cover;\n  background-position: center;\n  height: 600px;\n  position: relative;\n  animation: animateHeroimage 1s;\n\n  @keyframes animateHeroimage {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n`;\n\nexport const Content = styled.div`\n  padding: 20px;\n  max-width: var(--maxWidth);\n  margin: 0 auto;\n`;\n\nexport const Text = styled.div`\n  z-index: 100;\n  max-width: 700px;\n  position: absolute;\n  bottom: 40px;\n  margin-right: 20px;\n  min-height: 100px;\n  color: var(--white);\n\n  h1 {\n    font-size: var(--fontSuperBig);\n\n    @media screen and (max-width: 720px) {\n      font-size: var(--fontBig);\n    }\n  }\n\n  p {\n    font-size: var(--fontMed);\n  \n    @media screen and (max-width: 720px) {\n      font-size: var(--fontSmall);\n    }\n  }\n\n  @media screen and (max-width: 720px) {\n    max-width: 100%;\n  }\n`;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Content, Text, Wrapper } from './HeroImage.styles'\r\n\r\nconst HeroImage = ({ image, title, text }) => (\r\n  <Wrapper image={image}>\r\n    <Content>\r\n      <Text>\r\n        <h1>{title}</h1>\r\n        <p>{text}</p>\r\n      </Text>\r\n    </Content>\r\n  </Wrapper>\r\n)\r\n\r\nHeroImage.propTypes = {\r\n  image: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  text: PropTypes.string.isRequired\r\n}\r\n\r\nexport default HeroImage\r\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  max-width: var(--maxWidth);\n  margin: 0 auto;\n  padding: 0 20px;\n\n  h1 {\n    color: var(--medGrey);\n  }\n\n  h1 {\n    @media screen and (max-width: 768px) {\n      font-size: var(--fontBig);\n    }\n  }\n`;\n\nexport const Content = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  grid-gap: 2rem;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Content, Wrapper } from './Grid.styles'\n\nconst Grid = ({ header, children }) => (\n  <Wrapper>\n    <h1>{header}</h1>\n    <Content>{children}</Content>\n  </Wrapper>\n)\n\nGrid.propTypes = {\n  header: PropTypes.string.isRequired\n}\n\nexport default Grid;\n","import styled from 'styled-components';\n\nexport const Image = styled.img`\n  width: 100%;\n  height: 100%;\n  max-width: 720px;\n  transition: all 0.3s;\n  object-fit: cover;\n  border-radius: 20px;\n  animation: animateMovieThumb 0.5s;\n\n  :hover {\n    opacity: 0.8;\n  }\n\n  @keyframes animateMovieThumb {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n`;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Image } from './Thumb.styles'\r\n\r\nconst Thumb = ({ image, movieId, clickable }) => (\r\n  <div>\r\n    {clickable ?\r\n      (<Link to={`/${movieId}`}>\r\n        <Image src={image} alt='movie thumbnail' />\r\n      </Link>)\r\n      : (<Image src={image} alt='movie thumbnail' />)\r\n    }\r\n  </div>\r\n)\r\n\r\nThumb.propTypes = {\r\n  image: PropTypes.string.isRequired,\r\n  movieId: PropTypes.number.isRequired,\r\n  clickable: PropTypes.bool.isRequired\r\n}\r\n\r\nexport default Thumb;\r\n","export default __webpack_public_path__ + \"static/media/search-icon.cd820f5a.svg\";","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  height: 100px;\n  background: var(--darkGrey);\n  padding: 0 20px;\n`;\n\nexport const Content = styled.div`\n  position: relative;\n  max-width: var(--maxWidth);\n  width: 100%;\n  height: 55px;\n  background: var(--medGrey);\n  margin: 0 auto;\n  border-radius: 40px;\n  color: var(--white);\n\n  img {\n    position: absolute;\n    left: 15px;\n    top: 14px;\n    width: 30px;\n  }\n\n  input {\n    font-size: 28px;\n    position: absolute;\n    left: 0px;\n    margin: 8px 0;\n    padding: 0 0 0 60px;\n    border: 0;\n    width: 95%;\n    background: transparent;\n    height: 40px;\n    color: var(--white);\n\n    :focus {\n      outline: none;\n    }\n\n    @media screen and (max-width: 720px) {\n      font-size: 28px;\n    }\n  }\n`;\n","import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport searchIcon from '../../images/search-icon.svg'\n\nimport { Content, Wrapper } from './SearchBar.styles'\n\nconst SearchBar = ({ setSearchTerm }) => {\n\n  const [state, setState] = useState('')\n  const initial = useRef(true)\n\n  useEffect(() => {\n\n    if (initial.current) {\n      initial.current = false\n      return\n    }\n\n    const timer = setTimeout(() => {\n      setSearchTerm(state)\n    }, 500)\n\n    return () => clearTimeout(timer)\n  }, [setSearchTerm, state])\n\n  return <Wrapper>\n    <Content>\n\n      <img src={searchIcon} alt='A magnifying glass search icon' />\n      <input\n        type='text'\n        placeholder='Search Movie'\n        onChange={event => setState(event.currentTarget.value)}\n        value={state}\n      />\n\n    </Content>\n  </Wrapper>\n}\n\nSearchBar.propTypes = {\n  setSearchTerm: PropTypes.func.isRequired,\n}\n\nexport default SearchBar\n","\nimport styled from 'styled-components';\n\nexport const Wrapper = styled.button`\n  display: block;\n  background: var(--darkGrey);\n  width: 25%;\n  min-width: 200px;\n  height: 60px;\n  border-radius: 30px;\n  color: var(--white);\n  border: 0;\n  font-size: var(--fontBig);\n  margin: 20px auto;\n  transition: all 0.3s;\n  outline: none;\n  cursor: pointer;\n\n  :hover {\n    opacity: 0.8;\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Wrapper } from './Button.styles'\n\nconst Button = ({ text, callback }) => (\n  <Wrapper type='button' onClick={callback}>\n    {text}\n  </Wrapper>\n)\n\nButton.propTypes = {\n  text: PropTypes.string.isRequired,\n  callback: PropTypes.func.isRequired\n}\n\nexport default Button\n","import {\r\n  SEARCH_BASE_URL,\r\n  POPULAR_BASE_URL,\r\n  API_URL,\r\n  API_KEY,\r\n  REQUEST_TOKEN_URL,\r\n  LOGIN_URL,\r\n  SESSION_ID_URL,\r\n} from './config';\r\n\r\nconst defaultConfig = {\r\n  method: 'POST',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n};\r\n\r\nexport default {\r\n  fetchMovies: async (searchTerm, page) => {\r\n    const endpoint = searchTerm\r\n      ? `${SEARCH_BASE_URL}${searchTerm}&page=${page}`\r\n      : `${POPULAR_BASE_URL}&page=${page}`;\r\n\r\n    return await (await fetch(endpoint)).json();\r\n  },\r\n\r\n  fetchMovie: async (movieId) => {\r\n    const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\r\n    return await (await fetch(endpoint)).json();\r\n  },\r\n\r\n  fetchCredits: async (movieId) => {\r\n    const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\r\n    return await (await fetch(creditsEndpoint)).json();\r\n  },\r\n\r\n  // Bo  nus material below for login\r\n  getRequestToken: async () => {\r\n    const reqToken = await (await fetch(REQUEST_TOKEN_URL)).json();\r\n    return reqToken.request_token;\r\n  },\r\n\r\n  authenticate: async (requestToken, username, password) => {\r\n    const bodyData = {\r\n      username,\r\n      password,\r\n      request_token: requestToken,\r\n    };\r\n\r\n    // First authenticate the requestToken\r\n    const data = await (\r\n      await fetch(LOGIN_URL, {\r\n        ...defaultConfig,\r\n        body: JSON.stringify(bodyData),\r\n      })\r\n    ).json();\r\n\r\n    // Then get the sessionId with the requestToken\r\n    if (data.success) {\r\n      const sessionId = await (\r\n        await fetch(SESSION_ID_URL, {\r\n          ...defaultConfig,\r\n          body: JSON.stringify({ request_token: requestToken }),\r\n        })\r\n      ).json();\r\n      return sessionId;\r\n    }\r\n  },\r\n};\r\n","// Convert time to hours and minutes\nexport const calcTime = time => {\n  const hours = Math.floor(time / 60);\n  const mins = time % 60;\n  return `${hours}h ${mins}m`;\n};\n// Convert a number to money formatting\nexport const convertMoney = money => {\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n  });\n  return formatter.format(money);\n};\n\nexport const isPersistedState = stateName => {\n  const sessionState = sessionStorage.getItem(stateName);\n  return sessionState && JSON.parse(sessionState);\n}\n","import { useState, useEffect } from 'react';\r\n\r\nimport API from '../API';\r\nimport { isPersistedState } from '../helpers';\r\n\r\nconst inititalState = {\r\n  page: 0,\r\n  results: [],\r\n  total_pages: 0,\r\n  total_results: 0\r\n}\r\n\r\nexport const useHomeFetch = () => {\r\n  const [state, setState] = useState(inititalState)\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState(false)\r\n  const [searchTerm, setSearchTerm] = useState('')\r\n  const [isLoadingMore, setIsLoadingMore] = useState(false)\r\n\r\n  const fetchMovies = async (page, searchTerm = '') => {\r\n    try {\r\n      setError(false)\r\n      setLoading(true)\r\n\r\n      const movies = await API.fetchMovies(searchTerm, page)\r\n\r\n      setState(prev => ({\r\n        ...movies,\r\n        results: page > 1 ? [...prev.results, ...movies.results] : [...movies.results]\r\n      }))\r\n\r\n    } catch (error) {\r\n      setError(true)\r\n      setLoading(false)\r\n    }\r\n\r\n    setLoading(false)\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n    if (!searchTerm) {\r\n      const sessionState = isPersistedState('homeState')\r\n      if (sessionState) {\r\n        setState(sessionState)\r\n        return\r\n      }\r\n    }\r\n\r\n    setState(inititalState)\r\n    fetchMovies(1, searchTerm)\r\n\r\n  }, [searchTerm]) // it will run only when searchTerm changes and on first render\r\n\r\n  useEffect(() => {\r\n    if (!isLoadingMore) return\r\n\r\n    fetchMovies(state.page + 1, searchTerm)\r\n    setIsLoadingMore(false) // to avoid multiple calls  when user scrolls down\r\n  }, [isLoadingMore, state.page, searchTerm])\r\n\r\n  useEffect(() => {\r\n\r\n    if (!searchTerm) {\r\n      sessionStorage.setItem('homeState', JSON.stringify(state))\r\n    }\r\n\r\n  }, [searchTerm, state])\r\n\r\n  return { state, loading, error, setSearchTerm, searchTerm, setIsLoadingMore }\r\n}\r\n","import { Spinner } from './Spinner.styles'\nexport default Spinner;\n","import styled from 'styled-components';\n\nexport const Spinner = styled.div`\n  border: 5px solid var(--lightGrey); \n  border-top: 5px solid var(--medGrey);\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  animation: spin 0.8s linear infinite;\n  margin: 20px auto;\n\n  @keyframes spin {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`;\n","import React from 'react';\r\n\r\nimport { POSTER_SIZE, BACKDROP_SIZE, IMAGE_BASE_URL } from '../config'\r\n\r\nimport NoImage from '../images/no_image.jpg'\r\n\r\nimport HeroImage from './HeroImage';\r\nimport Grid from './Grid';\r\nimport Thumb from './Thumb';\r\nimport SearchBar from './SearchBar';\r\nimport Button from './Button';\r\n\r\nimport { useHomeFetch } from '../hooks/useHomeFetch'\r\nimport Spinner from './Spinner';\r\n\r\nconst Home = () => {\r\n\r\n  const { state, loading, error, setSearchTerm, searchTerm, setIsLoadingMore } = useHomeFetch()\r\n\r\n  if (error) return <div>Something went wrong ...</div>\r\n\r\n  return (\r\n    <>\r\n      {!searchTerm && state.results[0] && //short circuit\r\n        <HeroImage\r\n          image={`${IMAGE_BASE_URL}${BACKDROP_SIZE}${state.results[0].backdrop_path}`}\r\n          title={state.results[0].original_title}\r\n          text={state.results[0].overview}\r\n        />\r\n      }\r\n\r\n      <SearchBar setSearchTerm={setSearchTerm} />\r\n\r\n      <Grid header={searchTerm ? 'Search Result' : 'Popular Movies'}>\r\n        {state.results.map(movie => (\r\n          <Thumb\r\n            key={movie.id}\r\n            clickable\r\n            image={movie.poster_path ? `${IMAGE_BASE_URL}${POSTER_SIZE}${movie.poster_path}` : NoImage}\r\n            movieId={movie.id}\r\n          >\r\n            {movie.title}\r\n          </Thumb>\r\n        ))}\r\n      </Grid>\r\n\r\n      {loading && <Spinner />}\r\n      {state.page < state.total_pages && !loading && (\r\n        <Button text={'Load More'} callback={() => setIsLoadingMore(true)} />\r\n      )}\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 70px;\n  background: var(--medGrey);\n  color: var(--white);\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  width: 100%;\n  max-width: var(--maxWidth);\n  padding: 0 20px;\n\n  span {\n    font-size: 1.2rem;\n    color: var(--white);\n    padding-right: 10px;\n\n    @media screen and (max-width: 768px) {\n      font-size: 16px;\n    }\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nimport { Wrapper, Content } from './BreadCrumb.styles'\n\nconst BreadCrumb = ({ movieTitle }) => (\n  <Wrapper>\n    <Content>\n      <Link to='/'>\n        <span>Home</span>\n      </Link>\n\n      <span>|</span>\n\n      <span>{movieTitle}</span>\n\n    </Content>\n  </Wrapper>\n)\n\nBreadCrumb.propTypes = {\n  movieTitle: PropTypes.string.isRequired\n}\n\nexport default BreadCrumb\n","import styled from 'styled-components';\nimport { IMAGE_BASE_URL, BACKDROP_SIZE } from '../../config';\n\nexport const Wrapper = styled.div`\n  background: ${(props) =>\n    props.backdrop\n      ? `url('${IMAGE_BASE_URL}${BACKDROP_SIZE}${props.backdrop}')`\n      : '#000'};\n  background-size: cover;\n  background-position: center;\n  padding: 40px 20px;\n  animation: animateMovieinfo 1s;\n\n  @keyframes animateMovieinfo {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  max-width: 1280px;\n\n  margin: 0 auto;\n  background: rgb(0, 0, 0, 0.7);\n  border-radius: 20px;\n\n  @media screen and (max-width: 768px) {\n    display: block;\n    max-height: none;\n  }\n`;\n\nexport const Text = styled.div`\n  width: 100%;\n  padding: 20px 40px;\n  color: var(--white);\n  overflow: hidden;\n\n  .rating-director {\n    display: flex;\n    justify-content: flex-start;\n  }\n\n  .score {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 35px;\n    height: 35px;\n    background: #fff;\n    color: #000;\n    font-weight: 800;\n    border-radius: 25px;\n    margin: 0px 0 0 0;\n  }\n\n  .director {\n    margin: 0 0 0 40px;\n\n    p {\n      margin: 0;\n    }\n  }\n\n  h1 {\n    @media screen and (max-width: 768px) {\n      font-size: var(--fontBig);\n    }\n  }\n`;\n","import React from 'react'\nimport PropTypes from 'prop-types';\n\nimport { IMAGE_BASE_URL, POSTER_SIZE } from '../../config'\n\nimport NoImage from '../../images/no_image.jpg'\n\nimport { Content, Text, Wrapper } from './MovieInfo.styles'\n\nimport Thumb from '../Thumb'\n\nconst MovieInfo = ({ movie }) => (\n  <Wrapper backdrop={movie.backgrop_path}>\n    <Content>\n      <Thumb\n        image={movie.poster_path ? `${IMAGE_BASE_URL}${POSTER_SIZE}${movie.poster_path}` : NoImage}\n        clickable={false}\n        alt='movie thumbnail'\n        movieId={movie.id}\n      />\n\n      <Text>\n        <h1>{movie.title}</h1>\n        <h3>PLOT</h3>\n        <p>{movie.overview}</p>\n\n        <div className='rating-director'>\n          <div>\n            <h3>RATING</h3>\n            <div className='score'>{movie.vote_average}</div>\n          </div>\n\n          <div className='director'>\n            <h3>DIRECTOR{movie.directors.length > 1 ? 'S' : ''}</h3>\n            {movie.directors.map(({ name, credit_id }, i) => (\n              <p key={credit_id}>{name}</p>\n            ))}\n          </div>\n        </div>\n\n      </Text>\n    </Content>\n  </Wrapper>\n)\n\nMovieInfo.propTypes = {\n  movie: PropTypes.object.isRequired\n}\n\nexport default MovieInfo\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  min-height: 100px;\n  background: var(--darkGrey);\n  padding: 0 20px;\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  max-width: var(--maxWidth);\n  width: 100%;\n  margin: 0 auto;\n\n  .column {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: var(--medGrey);\n    border-radius: 20px;\n    margin: 0 20px;\n    flex: 1;\n\n    :first-child {\n      margin-left: 0;\n    }\n\n    :last-child {\n      margin-right: 0;\n    }\n  }\n\n  @media screen and (max-width: 768px) {\n    display: block;\n\n    .column {\n      margin: 20px 0;\n    }\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { calcTime, convertMoney } from '../../helpers'\n\nimport { Content, Wrapper } from './MovieInfoBar.styles'\n\nconst MovieInfoBar = ({ time, budget, revenue }) => {\n  return <Wrapper>\n    <Content>\n      <div className='column'>\n        <p>Running time: {calcTime(time)}</p>\n      </div>\n      <div className='column'>\n        <p>Budget: {convertMoney(budget)}</p>\n      </div>\n      <div className='column'>\n        <p>Revenue: {convertMoney(revenue)}</p>\n      </div>\n    </Content>\n  </Wrapper>\n}\n\nMovieInfoBar.propTypes = {\n  time: PropTypes.number,\n  budget: PropTypes.number,\n  revenue: PropTypes.number\n}\n\nexport default MovieInfoBar\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  color: var(--white);\n  background: var(--darkGrey);\n  border-radius: 20px;\n  padding: 5px;\n  text-align: center;\n\n  h3 {\n    margin: 10px 0 0 0;\n  }\n\n  p {\n    margin: 5px 0;\n  }\n`;\n\nexport const Image = styled.img`\n  display: block;\n  width: 100%;\n  height: 200px;\n  object-fit: cover;\n  border-radius: 15px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Wrapper, Image } from './Actor.styles'\n\nconst Actor = ({ name, character, imageUrl }) => (\n  <Wrapper>\n    <Image src={imageUrl} alt={name} />\n    <h3>{name}</h3>\n    <p>{character}</p>\n  </Wrapper>\n)\n\nActor.propTypes = {\n  name: PropTypes.string.isRequired,\n  character: PropTypes.string.isRequired,\n  imageUrl: PropTypes.string\n}\n\nexport default Actor\n","import React from 'react';\r\nimport { useParams } from 'react-router';\r\n\r\nimport { IMAGE_BASE_URL, POSTER_SIZE } from '../config'\r\n\r\nimport Grid from './Grid';\r\nimport Spinner from './Spinner';\r\nimport BreadCrumb from './BreadCrumb';\r\nimport MovieInfo from './MovieInfo';\r\n\r\nimport { useMovieFetch } from '../hooks/useMovieFetch';\r\n\r\nimport NoImage from '../images/no_image.jpg'\r\nimport MovieInfoBar from './MovieInfoBar';\r\nimport Actor from './Actor';\r\n\r\nconst Movie = () => {\r\n\r\n  const { movieId } = useParams()\r\n  const { error, loading, state: movie } = useMovieFetch(movieId)\r\n\r\n  if (loading) return <Spinner />\r\n  if (error) return <div>Something went wrong...</div>\r\n\r\n  return (\r\n    <>\r\n      <BreadCrumb movieTitle={movie.original_title} />\r\n      <MovieInfo movie={movie} />\r\n      <MovieInfoBar\r\n        time={movie.runtime}\r\n        budget={movie.budget}\r\n        revenue={movie.revenue} />\r\n\r\n      <Grid header='Actors'>\r\n        {movie.actors.map(actor => (\r\n          <Actor\r\n            key={actor.credit_id}\r\n            name={actor.name}\r\n            character={actor.character}\r\n            imageUrl={\r\n              actor.profile_path ?\r\n                `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}`\r\n                : NoImage\r\n            } />\r\n        ))}\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Movie\r\n","import { useState, useEffect } from 'react';\r\n\r\nimport API from '../API';\r\nimport { isPersistedState } from '../helpers';\r\n\r\nexport const useMovieFetch = (movieId) => {\r\n  const [state, setState] = useState()\r\n  const [loading, setLoading] = useState(true)\r\n  const [error, setError] = useState(false)\r\n\r\n  useEffect(() => {\r\n\r\n    const fetchMovie = async () => {\r\n      try {\r\n        const movie = await API.fetchMovie(movieId)\r\n        const credits = await API.fetchCredits(movieId)\r\n\r\n        const directors = credits.crew.filter(member => member.job === 'Director')\r\n\r\n        setState({\r\n          ...movie,\r\n          directors,\r\n          actors: credits.cast\r\n        });\r\n\r\n        setLoading(false)\r\n      } catch (error) {\r\n        setError(true);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    const sessionState = isPersistedState(movieId)\r\n    if (sessionState) {\r\n      setState(sessionState)\r\n      setLoading(false)\r\n      return\r\n    }\r\n\r\n    fetchMovie();\r\n\r\n  }, [movieId])\r\n\r\n  useEffect(() => {\r\n\r\n    sessionStorage.setItem(movieId, JSON.stringify(state))\r\n  }, [movieId, state])\r\n\r\n  return { state, loading, error };\r\n\r\n}\r\n","import React from 'react';\r\n\r\nconst NotFound = () => <div>NotFound</div>\r\n\r\nexport default NotFound;\r\n","import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  :root {\n    --maxWidth: 1280px; \n    --white: #fff;\n    --lightGrey: #eee;\n    --medGrey: #353535; \n    --darkGrey: #1c1c1c;\n    --fontSuperBig: 2.5rem;\n    --fontBig: 1.5rem;\n    --fontMed: 1.2rem;\n    --fontSmall: 1rem;\n  }\n\n  * {\n    box-sizing: border-box;\n    font-family: 'Abel', sans-serif;  \n  }\n\n  body {  \n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n\n    h1 {\n      font-size: 2rem;\n      font-weight: 600;\n      color: var(--white);\n    }\n\n    h3 {\n      font-size: 1.1rem;\n      font-weight: 600;\n    }\n\n    p {\n      font-size: 1rem;\n      color: var(--white);\n    }\n  }\n`;\n","import React from 'react';\r\n\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom'\r\n\r\nimport Header from './components/Header';\r\nimport Home from './components/Home';\r\nimport Movie from './components/Movie';\r\nimport NotFound from './components/NotFound';\r\n\r\nimport { GlobalStyle } from './GlobalStyle';\r\n\r\nconst App = () => (\r\n  <Router>\r\n    <Header />\r\n\r\n    <Routes>\r\n      <Route path='/' element={<Home />} />\r\n      <Route path='/:movieId' element={<Movie />} />\r\n      <Route path='/*' element={<NotFound />} />\r\n    </Routes>\r\n    <GlobalStyle />\r\n  </Router>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}